
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Opera\MediaBundle\:
        resource: '../../*'
        exclude: '../../{DependencyInjection,Entity,Migrations,Tests,Kernel.php,MediaManager/Source.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    # Opera\MediaBundle\Controller\:
    #     resource: '../../Controller'
    #     tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    Opera\MediaBundle\MediaManager\SourceManager:
        public: true
        
    Opera\MediaBundle\Listener\FolderListener:
        calls:
            - { method: setContainer, arguments: [ "@service_container" ] }
        tags:
            - { name: "doctrine.orm.entity_listener", event: preRemove, entity: Opera\MediaBundle\Entity\Folder }
